HashMap

1)Can store 1 null key and many null values
2)Store Unique elements , no duplication allowed
3)Order of insertion is not maintained
4)HashMap is not synchronized and not thread safe
5)Therefore Iterators of HashMap are FailFast


LinkedHashMap

1)Can store 1 null key and many null values
2)Store Unique elements , no duplication allowed
3)Order of insertion is  maintained    *Important*

TreeMap

1)Cannot store null key but can have many null values (Because while inserting key ,
it compares key with every other key to maintain insertion order)
2)Store Unique elements , no duplication allowed
3)Order of insertion is ascending order.

ConcurrentHashMap

1)Cannot store null key/value
2)Store Unique elements , no duplication allowed
3)Order of insertion is not maintained
4)ConcurrentHashMap is synchronized and thread safe
5)Therefore Iterators of HashMap are FailSafe



When to use what ?

If I need to maintain unique elements and insertion order is important
-LinkedHashMap

If unique elemets is required and keys should be ascending order
-TreeMap

If unique element is required but order of insertion is not required
-HashMap




Why ConcurrentHashMap cant have null key/value?

Why is that a problem? Because there is no safe way to do that yourself. Take the following code:

if (m.containsKey(k)) {
   return m.get(k);
} else {
   throw new KeyNotPresentException();
}
Since m is a concurrent map, key k may be deleted between the containsKey and get calls,
causing this snippet to return a null that was never in the table, rather than the desired KeyNotPresentException.




