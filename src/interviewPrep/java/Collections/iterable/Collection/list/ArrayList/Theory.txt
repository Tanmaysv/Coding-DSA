ArrayList

1)Default capacity of Arraylist and Vector 10
2)ArrayList is not synchronized
3)If we add element at particular index and elemnt is already present a that index
Arraylist will rotate elements internally

ArrayList vs LinkedList

1)Insertion and deletion is O(1) in linkedList and O(n) for arrayList
2)Updating a specific element if we know a index is easy with arrayList
3)O(n) to search element in arraylist and linkedlist
4)However if array is sorted then we can use binary search in arraylist O(logn)

If we want to make arraylist synchronized then ?
Using Collections.synchronizedList() method
Using thread-safe variant of ArrayList which is : CopyOnWriteArrayList

Iterator of CopyOnWriteArrayList is fail-safe and doesn't throw ConcurrentModificationException
even if underlying CopyOnWriteArrayList is modified.




ArrayList vs Vector

Basically we have 3 difference(Synchronization performance, data-growth)

1)ArrayList are not synchronized , vector is synchronized
2)Therefore arraylist are more efficient then vector
3)Arraylist will increase by 1.5 times the size , vector will increase 2times of its size





Vector is synchronized by default, and ArrayList is not. Note :
you can make ArrayList also synchronized by passing arraylist object
to Collections.synchronizedList() method. Synchronized means : it can be
used with multiple threads with out any side effect.

ArrayLists grow by 50% of the previous size when space is not sufficient
for new element, where as Vector will grow by 100% of the previous size
when there is no space for new incoming element.




